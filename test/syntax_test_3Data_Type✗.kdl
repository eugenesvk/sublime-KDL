// SYNTAX TEST "Packages/KDL/KDL2.sublime-syntax"

// 3 Data: Type
  ( f oa1 +1 )n ( f oa1 +1 )1 k=( f oa1 +1 )1
//^                                               meta.annotation.kdl punctuation.separator.annotation.begin.kdl
//              ^                                 meta.annotation.kdl punctuation.separator.annotation.begin.kdl
//                              ^                 meta.annotation.kdl punctuation.separator.annotation.begin.kdl
//           ^                                    meta.annotation.kdl punctuation.separator.annotation.end.kdl
//                         ^                      meta.annotation.kdl punctuation.separator.annotation.end.kdl
//                                         ^      meta.annotation.kdl punctuation.separator.annotation.end.kdl
// ^^                                             meta.annotation.kdl entity.name.type.kdl
//    ^                                           invalid.illegal.position.kdl
//     ^^^^^^                                     invalid.illegal.muted.position.kdl
//               ^^                               meta.annotation.kdl entity.name.type.kdl
//                  ^                             invalid.illegal.position.kdl
//                   ^^^^^^                       invalid.illegal.muted.position.kdl
//                               ^^               meta.annotation.kdl entity.name.type.kdl
//                                  ^             invalid.illegal.position.kdl
//                                   ^^^^^^       invalid.illegal.muted.position.kdl

nn(no_space)n
//^                                               invalid.illegal.position.kdl

n (#null)1
// ^^                                             invalid.illegal.position.kdl
//   ^^^                                          invalid.illegal.muted.position.kdl
n (#true)1
// ^^                                             invalid.illegal.position.kdl
//   ^^^                                          invalid.illegal.muted.position.kdl
n (#false)1
// ^^                                             invalid.illegal.position.kdl
//   ^^^^                                         invalid.illegal.muted.position.kdl

n ()"✗← illegal empty type"
// ^                                              invalid.illegal.muted.kdl
n (                                                                                    　  )"✗← illegal blank type" i=just_space_in_arg_type_fail
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid.illegal.muted.kdl
n (a) "✗← legal separator"
//   ^                                           -invalid.illegal.position.kdl
  ()"✗← illegal empty type"
// ^                                              invalid.illegal.muted.kdl
 (                                                                                    　  )"✗← illegal blank type" i=just_space_in_node_type_fail
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid.illegal.muted.kdl
n p=(                                                                                    　  )"✗← illegal blank type" i=just_space_in_prop_type_fail
//   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid.illegal.muted.kdl
(a) "✗← legal separator"
// ^                                           -invalid.illegal.position.kdl

            n "a";
yv2_<legalv2>
//^^^^^^^^^^^                 -invalid.illegal.kdl


(aaaa)n k="a"a k=1;
(a)(a)n k="a"a k=1;

n "legal space between a tag and its value"
   (tttt)   ##    nn k=1 "a";
//       ^                  -invalid.illegal.position.kdl
//        ^^                -invalid.illegal.muted.position.kdl
//          ^^               invalid.illegal.kdl
//            ^             -invalid.illegal.position.kdl
//             ^^^          -invalid.illegal.muted.position.kdl
//                ^^         entity.name.tag.node.kdl
   ("tt")   ##    nn k=1 "a";
//       ^                  -invalid.illegal.position.kdl
//        ^^                -invalid.illegal.muted.position.kdl
//          ^^               invalid.illegal.kdl
//            ^             -invalid.illegal.position.kdl
//             ^^^          -invalid.illegal.muted.position.kdl
//                ^^         entity.name.tag.node.kdl
   (ttttttt)n k=1 "a";
//         ^                 meta.annotation.kdl punctuation.separator.annotation.end.kdl
//          ^                entity.name.tag.node.kdl
n a=r"tttt";
   (r"tttt")n k=1 "a";
//         ^                 meta.annotation.kdl punctuation.separator.annotation.end.kdl
//          ^                entity.name.tag.node.kdl
//  ^                        invalid.illegal.position.kdl
//   ^                       string.quoted.double.kdl,punctuation.definition.string.begin.kdl
//        ^                  string.quoted.double.kdl,punctuation.definition.string.end.kdl
   ("ttttt")n k=1 "a";
//         ^                 meta.annotation.kdl punctuation.separator.annotation.end.kdl
//          ^                entity.name.tag.node.kdl
   ("tt"ttt)n k=1 "a";
//         ^                 meta.annotation.kdl punctuation.separator.annotation.end.kdl
//          ^                entity.name.tag.node.kdl
//      ^^^                  invalid.illegal.position.kdl
   (r#"tt"#)n k=1 "a";
//         ^                 meta.annotation.kdl punctuation.separator.annotation.end.kdl
//          ^                entity.name.tag.node.kdl
//  ^                        invalid.illegal.position.kdl
//   ^^                     -invalid.illegal
//   ^^                      string.quoted.double.kdl,punctuation.definition.string.begin.kdl
//       ^^                  string.quoted.double.kdl,punctuation.definition.string.end.kdl
//   ^^^^^^                 -invalid.illegal
   (r"t""t")n k=1 "a";
//         ^                 meta.annotation.kdl punctuation.separator.annotation.end.kdl
//          ^                entity.name.tag.node.kdl
//  ^                        invalid.illegal.position.kdl
//   ^                      -invalid.illegal
//   ^                       string.quoted.double.kdl,punctuation.definition.string.begin.kdl
//     ^                     string.quoted.double.kdl,punctuation.definition.string.end.kdl
//      ^                    invalid.illegal.position.kdl
//      ^                   -invalid.illegal.muted.position.kdl
//       ^^                 -invalid.illegal.position.kdl
//       ^^                  invalid.illegal.muted.position.kdl
   ( "t""t")n k=1 "a";
//         ^                 meta.annotation.kdl punctuation.separator.annotation.end.kdl
//          ^                entity.name.tag.node.kdl
//      ^                    invalid.illegal.position.kdl
//       ^^                  invalid.illegal.muted.position.kdl

n   ()10 !="empty_arg_type_fail"
//   ^                       invalid.illegal.muted.kdl
    ()n !="empty_node_type_fail"
//   ^                       invalid.illegal.muted.kdl
n k=()#false !="empty_prop_type_fail"
//   ^                       invalid.illegal.muted.kdl

n i="not mark as illegal to avoid flashes" i=just_type_no_arg_fail
node (type)
//         ^ -invalid.illegal
n i="not mark as illegal to avoid flashes" i=just_type_no_prop_fail
node key=(type)
//             ^ -invalid.illegal
(just_type_no_node_id_fail)
//                         ^ invalid.illegal.position.kdl
n (type)key=10 i=type_before_prop_key_fail
//         ^ invalid.illegal.kdl
