// SYNTAX TEST "Packages/KDL/KDL2.sublime-syntax"
// 0. Test overall source match
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ text.kdl2

// 2 Node Element: 1 Node name
node_name "not a node"
//<-                      meta.node.kdl entity.name.tag.node.kdl
//^^^^^^^                 meta.node.kdl entity.name.tag.node.kdl
//       ^^^^^^^^^^^^^   -entity.name.tag.node.kdl
"nodestr" "not a node"
//<-                      meta.node.kdl
//^^^^^^^                 meta.node.kdl
 //<-                     entity.name.tag.node.kdl
//^^^^^^                  entity.name.tag.node.kdl
//       ^^^^^^^^^^^^^   -entity.name.tag.node.kdl
/-node_name "not a node"
//^^^^^^^^^               meta.node.kdl entity.name.tag.node.kdl
//         ^^^^^^^^^^^^^ -entity.name.tag.node.kdl
/-"nodestr" "not a node"
//^^^^^^^^                meta.node.kdl
//^^^^^^^^                entity.name.tag.node.kdl
//         ^^^^^^^^^^^^^ -entity.name.tag.node.kdl

"""
//<-              punctuation.definition.string.begin.kdl
 //<-             punctuation.definition.string.begin.kdl
//^               punctuation.definition.string.begin.kdl
node string
//^^^^^^^^^^      entity.name.tag.node.kdl meta.string.kdl string.quoted.double.block.kdl
multiline
//<-              meta.string.kdl string.quoted.double.block.kdl
  //<-            meta.string.kdl string.quoted.double.block.kdl
//^^^^^^^         meta.string.kdl string.quoted.double.block.kdl
"""
//<-              punctuation.definition.string.end.kdl
 //<-             punctuation.definition.string.end.kdl
//^               punctuation.definition.string.end.kdl

#"""
//<-              punctuation.definition.string.begin.kdl
 //<-             punctuation.definition.string.begin.kdl
//^^              punctuation.definition.string.begin.kdl
node raw string
//^^^^^^^^^^^^^   entity.name.tag.node.kdl meta.string.kdl string.quoted.double.block.raw.kdl
multiline
//^^^^^^^^        entity.name.tag.node.kdl meta.string.kdl string.quoted.double.block.raw.kdl
"""#
//<-              meta.string.kdl string.quoted.double.block.raw.kdl
  //<-            meta.string.kdl string.quoted.double.block.raw.kdl
//^^              punctuation.definition.string.end.kdl

#"""
//<-              punctuation.definition.string.begin.kdl
 //<-             punctuation.definition.string.begin.kdl
node #raw string
// ^^^^^^^^^^     entity.name.tag.node.kdl meta.string.kdl string.quoted.double.block.raw.kdl
multiline
//<-              meta.string.kdl string.quoted.double.block.raw.kdl
  //<-            meta.string.kdl string.quoted.double.block.raw.kdl
//^^^^^^^         entity.name.tag.node.kdl meta.string.kdl string.quoted.double.block.raw.kdl
  """#
//^^^^            punctuation.definition.string.end.kdl

  a1-+.; +a.-1; -a.-1; +.a1+-.; -.a1+-.; .a1+-.;
//^^^^^                                             meta.node.kdl entity.name.tag.node.kdl
//       ^^^^^                                      meta.node.kdl entity.name.tag.node.kdl
//              ^^^^^                               meta.node.kdl entity.name.tag.node.kdl
//                     ^^^^^^^                      meta.node.kdl entity.name.tag.node.kdl
//                              ^^^^^^^             meta.node.kdl entity.name.tag.node.kdl
//                                       ^^^^^^     meta.node.kdl entity.name.tag.node.kdl


// 2 Node Element: 2 Argument
kw   #true #false #null #inf #-inf #nan
//   ^^^^^                                                   meta.mapping.value.kdl keyword.other.kdl constant.language.boolean.kdl
//         ^^^^^^                                            meta.mapping.value.kdl keyword.other.kdl constant.language.boolean.kdl
//                ^^^^^                                      meta.mapping.value.kdl keyword.other.kdl constant.language.null.kdl
//                      ^^^^                                 meta.mapping.value.kdl keyword.other.kdl constant.language.float.kdl
//                           ^^^^^                           meta.mapping.value.kdl keyword.other.kdl constant.language.float.kdl
//                                 ^^^^                      meta.mapping.value.kdl keyword.other.kdl constant.language.float.kdl


// 2 Node Element: 3 Property (key=value)
command "twitter" "tw" a=2 b=#true url="https://twitter.com/" {
//                     ^                                     meta.mapping.key.kdl
//                      ^                                    punctuation.separator.key-value.kdl
//                       ^                                   meta.mapping.value.kdl
//                         ^                                 meta.mapping.key.kdl
//                          ^                                punctuation.separator.key-value.kdl
//                           ^^^^^                           meta.mapping.value.kdl
//                                 ^^^                       meta.mapping.key.kdl
//                                    ^                      punctuation.separator.key-value.kdl
//                                     ^^^^^^^^^^^^^^^^^^^^^ meta.mapping.value.kdl
  match regexp="^@(?<username>[A-Za-z_]+$" url="https://twitter.com/{username}" encoding="path"
  default url="https://twitter.com/search?q={}" encoding=(enc)"query" tst=#true
//                                                       ^^^^^        meta.annotation.kdl, meta.mapping.value.kdl
//                                                       ^            punctuation.separator.annotation.begin.kdl
//                                                           ^        punctuation.separator.annotation.end.kdl
//                                                        ^^^         entity.name.type.kdl
//        ^^^                                                         entity.other.attribute-name.kdl , meta.mapping.key.kdl
//                                         ^                         -entity.other.attribute-name.kdl
//           ^                                                        punctuation.separator.key-value.kdl
//            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                       meta.mapping.value.kdl
//                                                       ^^^^^^^^^^^^ meta.mapping.value.kdl
  kw t=#true f=#false n=#null fl=#inf fl=#-inf fl=#nan
//     ^^^^^                                                 meta.mapping.value.kdl keyword.other.kdl constant.language.boolean.kdl
//             ^^^^^^                                        meta.mapping.value.kdl keyword.other.kdl constant.language.boolean.kdl
//                      ^^^^^                                meta.mapping.value.kdl keyword.other.kdl constant.language.null.kdl
//                               ^^^^                        meta.mapping.value.kdl keyword.other.kdl constant.language.float.kdl
//                                       ^^^^^               meta.mapping.value.kdl keyword.other.kdl constant.language.float.kdl
//                                                ^^^^       meta.mapping.value.kdl keyword.other.kdl constant.language.float.kdl
}
n a  =  1 "a" =  1 a /**/ = /**/ 1
//^                                  meta.mapping.key.kdl
//   ^                               punctuation.separator.key-value.kdl
//      ^                            meta.mapping.value.kdl
// ^^                               -invalid.illegal.position.kdl
//    ^^                            -invalid.illegal.position.kdl
//        ^^^                        meta.mapping.key.kdl
//            ^                      punctuation.separator.key-value.kdl
//               ^                   meta.mapping.value.kdl
//           ^                      -invalid.illegal.position.kdl
//             ^^                   -invalid.illegal.position.kdl
//                 ^                 meta.mapping.key.kdl
//                        ^          punctuation.separator.key-value.kdl
//                               ^   meta.mapping.value.kdl
//                  ^^^^^^          -invalid.illegal.position.kdl
//                         ^^^^^^   -invalid.illegal.position.kdl

a p = "val"; a p = val;  a p=val;
//     ^^^^                         meta.property.value.kdl meta.mapping.value.kdl meta.string.kdl string.quoted.double.kdl
//                 ^^^              meta.property.value.kdl meta.mapping.value.kdl meta.string.kdl string.unquoted.kdl
//                           ^^^    meta.property.value.kdl meta.mapping.value.kdl meta.string.kdl string.unquoted.kdl
//         ^                        punctuation.terminator.node.kdl
//                    ^             punctuation.terminator.node.kdl
//                              ^   punctuation.terminator.node.kdl

n k = 1 ; n k =111; n k ="1"; n k = a ; n k =aaa; n k ="a"
//^                                                         meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
//          ^                                               meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
//                    ^                                     meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
//                              ^                           meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
//                                        ^                 meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
//                                                  ^       meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
//    ^                                                     meta.property.value.kdl meta.mapping.value.kdl
//             ^^^                                          meta.property.value.kdl meta.mapping.value.kdl
//                       ^^^                                meta.property.value.kdl meta.mapping.value.kdl
//                                  ^                       meta.property.value.kdl meta.mapping.value.kdl
//                                            ^^^           meta.property.value.kdl meta.mapping.value.kdl
//                                                     ^^^  meta.property.value.kdl meta.mapping.value.kdl
/-n k = 1 ; /-n k =111; /-n k ="1"; /-n k = a ; /-n k =aaa; /-n k ="a"
//  ^                                                                   meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//              ^                                                       meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//                          ^                                           meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//                                      ^                               meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//                                                  ^                   meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//                                                              ^       meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//      ^                                                               meta.property.value.kdl meta.mapping.value.kdl comment.line.slash-dash.kdl
//                 ^^^                                                  meta.property.value.kdl meta.mapping.value.kdl comment.line.slash-dash.kdl
//                             ^^^                                      meta.property.value.kdl meta.mapping.value.kdl comment.line.slash-dash.kdl
//                                          ^                           meta.property.value.kdl meta.mapping.value.kdl comment.line.slash-dash.kdl
//                                                     ^^^              meta.property.value.kdl meta.mapping.value.kdl comment.line.slash-dash.kdl
//                                                                 ^^^  meta.property.value.kdl meta.mapping.value.kdl comment.line.slash-dash.kdl

// 2 Node Element: 4 Child
node-outer {
//         ^                                      punctuation.section.mapping.begin.kdl
//<-                                              entity.name.tag, entity.name.tag.node
 //<-                                             entity.name.tag, entity.name.tag.node
//^^^^^^^^                                        entity.name.tag, entity.name.tag.node
  node_inner;
//^^^^^^^^^^                                      entity.name.tag, entity.name.tag.node
}
//<-                                              punctuation.section.mapping.end.kdl
parent { terminate-child1; terminate-child2; }
//       ^^^^^^^^^^^^^^^^                         entity.name.tag, entity.name.tag.node
//                         ^^^^^^^^^^^^^^^^       entity.name.tag, entity.name.tag.node
//                       ^                        punctuation.terminator.node.kdl
//                                         ^      punctuation.terminator.node.kdl
nnn {//ending} doesn't break the following}
}
//<- meta.node.kdl punctuation.section.mapping.end.kdl

n /-1  /-{ v; v } /-{ v; v } { v; v } /-{v; v } /-{ v }
n /-1  /-{ v; v }  /-{ v; v } { v; v } /-{v; v } /-{ v }
n /-1  /-{ v; v}  /-{ v; v}  { v; v}  /-{v; v}  /-{ v}
n /-1  /-{ v; v } /-{ v; v } { v; v } /-{v; v } /-{ v }
//^^                                                          meta.mapping.value.kdl comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
//     ^^                                                     comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
//                ^^                                          comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
//                                    ^^                      comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
//                                              ^^            comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
//       ^                                                    punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
//                  ^                                         punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
//                                      ^                     punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
//                                                ^           punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
//              ^                                             punctuation.section.mapping.end.kdl comment.line.slash-dash.kdl
//                         ^                                  punctuation.section.mapping.end.kdl comment.line.slash-dash.kdl
//                                            ^               punctuation.section.mapping.end.kdl comment.line.slash-dash.kdl
//                                                    ^       punctuation.section.mapping.end.kdl comment.line.slash-dash.kdl
//                           ^                                punctuation.section.mapping.begin.kdl
//                                  ^                         punctuation.section.mapping.end.kdl
//       ^^^^^^^^                                             meta.block.child.kdl
//                  ^^^^^^^^                                  meta.block.child.kdl
//                           ^^^^^^^^                         meta.block.child.kdl
//                                      ^^^^^^^               meta.block.child.kdl
//                                                ^^^^^       meta.block.child.kdl
n /-1  /-{ v; v } /-{ v; v } { v; v } /-{v; v } /-{ v }
/// n
//^                                                           comment.line.double-slash.kdl
//^ -                                                         meta.node.kdl

n /-1  /-{}   /-{} {/-v} /-{v} /-{valid}
//
n /-1              {  v} /-{v} /-{valid}
//
n /-1              {/-v} /-{v} /-{valid}



// 2 Node Element: 5 End
nnn
// ^                                   punctuation.terminator.node.kdl
nnn ;
//  ^                                  punctuation.terminator.node.kdl
nnn //
//  ^^                                 punctuation.terminator.node.kdl
children !="Last node @ child block no longer needs to be terminated with ; even with } on the same line"
n{n}
// ^                                   meta.block.child.kdl
// ^                                   punctuation.section.mapping.end.kdl
n{n;n{n;n};}
//       ^                             punctuation.section.mapping.end.kdl
//         ^                           punctuation.section.mapping.end.kdl
n{n;n{n;n}}
//       ^^                            punctuation.section.mapping.end.kdl
//        ^                            meta.block.child.kdl
n{n;n{n;nn}   }
//        ^                            punctuation.section.mapping.end.kdl
//            ^                        punctuation.section.mapping.end.kdl
n{n;n{n;n;}   }
//        ^                            punctuation.section.mapping.end.kdl
//            ^                        punctuation.section.mapping.end.kdl
n{n;n{n;n }   }
//        ^                            punctuation.section.mapping.end.kdl
//            ^                        punctuation.section.mapping.end.kdl
n{n;n{n;n;} ; }
//        ^                            punctuation.section.mapping.end.kdl
//            ^                        punctuation.section.mapping.end.kdl



// 3 Data: Keywords
boolean   #true   #false; "#null" #null
//        ^^^^^                         constant.language.boolean
//                ^^^^^^                constant.language.boolean
//                                ^^^^^ constant.language.null
boolean k=#true k=#false; "null" #null
//        ^^^^^                         constant.language.boolean
//                ^^^^^^                constant.language.boolean
//                               ^^^^^  constant.language.null



// 3 Data: Numbers
node-with-number +2.0
//               ^^^^                             constant.numeric.value.kdl, constant.numeric.decimal.kdl
//               ^                                keyword.operator.arithmetic.kdl
my-num    +1.234e-42 // decimal-radix numbers
//        ^^^^^^^^^^                              constant.numeric.value.kdl, constant.numeric.float.kdl
//        ^^^^^^                                  constant.numeric.significand.kdl
//              ^^^^                             -constant.numeric.significand.kdl
//              ^^^^                              constant.numeric.exponent.kdl
//        ^^^^^^                                 -constant.numeric.exponent.kdl
//        ^                                       keyword.operator.arithmetic.kdl
//               ^                                keyword.operator.arithmetic.kdl
//          ^                                     punctuation.separator.decimal.kdl
//              ^                                 punctuation.separator.exponent.kdl
my-num    -1.234    //   with optional exponent
//        ^^^^^^                                  constant.numeric.value.kdl, constant.numeric.decimal.kdl
//        ^                                       keyword.operator.arithmetic.kdl
//          ^                                     punctuation.separator.decimal.kdl
my-num    -3        //   with optional fractional
//        ^^                                      constant.numeric.integer.kdl, constant.numeric.value.kdl
//        ^                                       keyword.operator.arithmetic.kdl
my-hex    0xdeadbeef
//        ^^^^^^^^^^                    constant.numeric.integer.hexadecimal.kdl
//        ^^                            constant.numeric.base.kdl
//          ^^^^^^^^                    constant.numeric.value.kdl
my-octal  0o755
//        ^^^^^                         constant.numeric.integer.octal.kdl
//        ^^                            constant.numeric.base.kdl
//          ^^^                         constant.numeric.value.kdl
my-binary 0b10101101
//        ^^^^^^^^^^                    constant.numeric.integer.binary.kdl
//        ^^                            constant.numeric.base.kdl
//          ^^^^^^^^                    constant.numeric.value.kdl
bignum 1_000_000.000_001e+1_000 // Numbers can have underscores to help readability
//      ^                               punctuation.separator.number.kdl
//          ^                           punctuation.separator.number.kdl
//                  ^                   punctuation.separator.number.kdl
//                         ^            punctuation.separator.number.kdl
n "Don't error invalid exponents before a newline as it might turn valid"
n 0b
// ^                          -invalid.illegal.position.kdl
n 0o
// ^                          -invalid.illegal.position.kdl
n 0x
// ^                          -invalid.illegal.position.kdl
n 10.5e
//    ^                       -invalid.illegal
n 10.5e+
//    ^^                      -invalid.illegal
n 10.5e+4
//    ^                        punctuation.separator.exponent.kdl
//     ^                       keyword.operator.arithmetic.kdl

// 3 Data: Strings
n "\\\b\f\n\r\t\s\"\/ escape set"
// ^^^^^^^^^^^^^^^^^                              constant.character.escape.kdl
//                  ^                            -constant.character.escape.kdl
// ^                                              punctuation.definition.escape.begin.kdl
//  ^                                            -punctuation.definition.escape.begin.kdl
//   ^                                            punctuation.definition.escape.begin.kdl
//    ^                                          -punctuation.definition.escape.begin.kdl
//     ^                                          punctuation.definition.escape.begin.kdl
//      ^                                        -punctuation.definition.escape.begin.kdl
//       ^                                        punctuation.definition.escape.begin.kdl
//        ^                                      -punctuation.definition.escape.begin.kdl
//         ^                                      punctuation.definition.escape.begin.kdl
//          ^                                    -punctuation.definition.escape.begin.kdl
//                 ^                              punctuation.definition.escape.begin.kdl
//                  ^                            -punctuation.definition.escape.begin.kdl
title "Regular \b\\\/\u{10FFFF}string"
//    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^            meta.string.kdl, string.quoted.double.kdl
//             ^^^^                               constant.character.escape.kdl
//                   ^                            constant.character.escape.kdl punctuation.definition.escape.begin.kdl
//                     ^                          constant.character.escape.utf8.hex.kdl punctuation.definition.usv.begin.kdl
//                            ^                   constant.character.escape.utf8.hex.kdl punctuation.definition.usv.end.kdl
//                     ^^^^^^^^                   constant.character.escape.utf8.hex.kdl
//    ^                                           punctuation.definition.string.begin.kdl
//                                   ^            punctuation.definition.string.end.kdl
title #"Raw string"#
//    ^^^^^^^^^^^^^^                              string.quoted.double.raw.kdl
//    ^^                                          punctuation.definition.string.begin.kdl
//                ^^                              punctuation.definition.string.end.kdl

title  ###"""
               　"Rawest"""string"
               　//     ^^^                                       -punctuation.definition.string.begin.kdl
               　//^^^^^^^^^^^^^^^                                 meta.string.kdl, string.quoted.double.block.raw.kdl
//<-                                             -whitespace.dedent.kdl
// <-                                            -whitespace.dedent.kdl
//^^^^^^^^^^^^^^                                 -whitespace.dedent.kdl
↓to↑ Dedented whitespace can NOT be supported in Sublime's syntax language
               　"""###
//              ^^^^^^                            punctuation.definition.string.end.kdl
//<-                                              string.quoted.double.block.raw.kdl whitespace.dedent.kdl
 //<-                                             string.quoted.double.block.raw.kdl whitespace.dedent.kdl
//^^^^^^^^^^^^^^                                  string.quoted.double.block.raw.kdl whitespace.dedent.kdl
n a="""
  asdf\"""
//    ^                          constant.character.escape.kdl punctuation.definition.escape.begin.kdl
//     ^                         constant.character.escape.kdl
//^                             -invalid.illegal.position.kdl
// ^^^^                         -invalid.illegal.muted.position.kdl
//     ^^^                      -punctuation.definition.string.end.kdl
  """
//^^^                            punctuation.definition.string.end.kdl

nnn #"raw"#
nnn #"multiline raw
//  ^^^^^^^^^^^^^^^          string.quoted.double.raw.kdl
//  ^^                       punctuation.definition.string.begin.kdl
string
//^^^^                       string.quoted.double.raw.kdl
multiline
//^^^^^^^                    string.quoted.double.raw.kdl
"#
//<-      punctuation.definition.string.end.kdl
a "\u{000FFF} \u{0F}" !="Unicode escaped in non-canonical format with extra prefixed 0s"
//    ^^^^^^                            constant.character.escape.utf8.hex.kdl
//    ^^^^^^                           -invalid.illegal.muted.position.kdl
//               ^^                     constant.character.escape.utf8.hex.kdl
//               ^^                    -invalid.illegal.muted.position.kdl
n s="""
//  ^^^                      string.quoted.double.block.kdl punctuation.definition.string.begin.kdl
 a  xcc
//^^^^^                      string.quoted.double.block.kdl
  \ \  """ i="only the last whitespace escape can be matched"
//<-                         whitespace.dedent.kdl
 //<-                        whitespace.dedent.kdl
//^^^^                       whitespace.dedent.kdl
//  ^^^                      constant.character.escape.kdl
//  ^                        punctuation.definition.escape.begin.kdl
//   ^^                     -punctuation.definition.escape.begin.kdl
//^                         -constant.character.escape.kdl punctuation.definition.escape.begin.kdl
//     ^^^                   string.quoted.double.block.kdl punctuation.definition.string.end.kdl

* s="""
  " "" consecutive double-quotes allowed in the bodies of multi-line quoted strings (no escapes)
//^^^^                       string.quoted.double.block.kdl
"""

a #"""
//^^^^                    string.quoted.double.block.raw.kdl punctuation.definition.string.begin.kdl
raw multiline\n
//^^^^^^^^^^^^^^          string.quoted.double.block.raw.kdl
//           ^           -punctuation.definition.escape.begin.kdl
//           ^^          -constant.character.escape.kdl
  """# i=1
//^^^^                    string.quoted.double.block.raw.kdl punctuation.definition.string.end.kdl
a ##"""
//^^^^^                   string.quoted.double.block.raw.kdl punctuation.definition.string.begin.kdl
  """## i=1
//^^^^^                   string.quoted.double.block.raw.kdl punctuation.definition.string.end.kdl


// 3 Data: Type
("a")a b=(#"sdf"#)1 c=(###"s"d"f"###)2 "allow strings, including raw, in annotations"
//  ^                                              punctuation.separator.annotation.end.kdl
//               ^                                 punctuation.separator.annotation.end.kdl
//                                  ^              punctuation.separator.annotation.end.kdl
//^                                                meta.annotation.kdl entity.name.type.kdl meta.string.kdl
//        ^^^^^^^                                  meta.annotation.kdl entity.name.type.kdl meta.string.kdl
//                     ^^^^^^^^^^^^^               meta.annotation.kdl entity.name.type.kdl meta.string.kdl
(###"s"d" and also in line-splitting strings
   f"###)a
//^^^^^^                                          meta.annotation.kdl entity.name.type.kdl meta.string.kdl
//      ^                                         punctuation.separator.annotation.end.kdl
  // * Between annotations and the thing they're annotating `(blah) node (thing) 1 y= (who) 2`
  ( /**/ fo1 /**/ ) /**/ n ( /**/ fo2 /**/ ) /**/ 1 k=( /**/ fo3 /**/ ) /**/ 1
//^                                                                            punctuation.separator.annotation.begin.kdl
//                ^                                                            punctuation.separator.annotation.end.kdl
//                 ^                                                          -invalid.illegal
//                      ^                                                     -invalid.illegal
// ^^^^^^^^^^^^^^^                                                             meta.node.kdl meta.annotation.kdl entity.name.type.kdl
//  ^^^^                                                                       comment.block.kdl
//           ^^^^                                                              comment.block.kdl
//                  ^^^^                                                       comment.block.kdl
//                         ^                                                   punctuation.separator.annotation.begin.kdl
//                                         ^                                   punctuation.separator.annotation.end.kdl
//                                          ^                                 -invalid.illegal
//                                               ^                            -invalid.illegal
//                          ^^^^^^^^^^^^^^^                                    meta.annotation.kdl entity.name.type.kdl
//                           ^^^^                                              comment.block.kdl
//                                    ^^^^                                     comment.block.kdl
//                                           ^^^^                              comment.block.kdl
//                                                    ^                        punctuation.separator.annotation.begin.kdl
//                                                                    ^        punctuation.separator.annotation.end.kdl
//                                                                     ^      -invalid.illegal
//                                                                          ^ -invalid.illegal
//                                                     ^^^^^^^^^^^^^^^         meta.annotation.kdl entity.name.type.kdl
//                                                      ^^^^                   comment.block.kdl
//                                                               ^^^^          comment.block.kdl
//                                                                      ^^^^   comment.block.kdl

(a)n k="a" k=1;
(a)n k="a" k=1;
(a)n k="a" k=1
(a)n k="a" k=1
  (a)n k="a" k=1;
//^^^                        meta.annotation.kdl
//   ^                      -meta.annotation.kdl
//^                          punctuation.separator.annotation.begin.kdl
//  ^                        punctuation.separator.annotation.end.kdl
// ^                         entity.name.type.kdl
//   ^                       entity.name.tag.node.kdl
  ()()n k="a" k=1;
//^^                         meta.annotation.kdl
//  ^                       -meta.annotation.kdl
//^                          punctuation.separator.annotation.begin.kdl
// ^                         invalid.illegal.muted.kdl
//  ^^                       invalid.illegal.kdl
//    ^                      entity.name.tag.node.kdl
  ("a")n k="a" k=1;
//^^^^^                      meta.annotation.kdl
//     ^                    -meta.annotation.kdl
//^                          punctuation.separator.annotation.begin.kdl
//    ^                      punctuation.separator.annotation.end.kdl
// ^^^                       entity.name.type.kdl
//     ^                     entity.name.tag.node.kdl




// 7. Test various
smile "😁"  // files must be utf8 encoded
"!@#$@$%Q#$%~@!40" "1.2.3" "!!!!!"=#true // Instead of anonymous nodes, nodes and properties can be wrapped in "" for arbitrary node names.
foo123~!@<>ÿ$%𐀀^‰†&*,.:'|?+ "weeee"       // Legal bare identifier
//<-                                    entity.name.tag, entity.name.tag.node
 //<-                                   entity.name.tag, entity.name.tag.node
//^^^^^^^^^^^^^^^^^^^^^^^^^             entity.name.tag, entity.name.tag.node
//                          ^^^^^^^     meta.string.kdl, string.quoted.double.kdl
ノード　お名前="☜(ﾟヮﾟ☜)" // use unicode!
//  ^^^                                 meta.mapping.key.kdl
//     ^                                punctuation.separator.key-value.kdl
//      ^^^^^^^^^                       meta.mapping.value.kdl, meta.string.kdl, string.quoted.double.kdl
//<-                                    entity.name.tag, entity.name.tag.node
 //<-                                   entity.name.tag, entity.name.tag.node
//^                                     entity.name.tag, entity.name.tag.node
foo bar=#true "baz" quux=4 #false 1 2 3 // kdl specifically allows properties and values to be interspersed with each other, much like CLI commands

// 8. Test Line continuation
node-with-line-continuation \ /* Nodes can be separated into multiple lines with a single-line comment
//<-                                              entity.name.tag, entity.name.tag.node
 //<-                                             entity.name.tag, entity.name.tag.node
//^^^^^^^^^^^^^^^^^^^^^^^^^                       entity.name.tag, entity.name.tag.node
//                          ^                     punctuation.separator.continuation.line.kdl
//                            ^^                  punctuation.definition.comment.begin.kdl
//                            ^^^^^^^^^^^^^^^^^^^ comment.block.kdl
*/
r"↑ ␤ required after \ since /**/=whitespace"
node-with-line-continuations \ // Only 1 (optional) single-line comment
//                           ^                    punctuation.separator.continuation.line.kdl
//                             ^^                 punctuation.definition.comment.begin.kdl
//                             ^^^^^^^^^^^^^^^^^^ comment.line.double-slash.kdl
k=1

node-with-line-continuations \
  +1.1 2                     \ /* after
//                           ^                    punctuation.separator.continuation.line.kdl
//                             ^^                 punctuation.definition.comment.begin.kdl
//                             ^^^^^^^^           comment.block.kdl
*/
  3 4                        \ /* line continuation
//                           ^                    punctuation.separator.continuation.line.kdl
//                             ^^                 punctuation.definition.comment.begin.kdl
//                             ^^^^^^^^^^^^^^^^^^ comment.block.kdl
*/
  3 4                        \/*
//                           ^                    punctuation.separator.continuation.line.kdl
//                            ^^                  punctuation.definition.comment.begin.kdl, comment.block
  or block comments /* even nested */
//                  ^^                            punctuation.definition.comment.begin.kdl, comment.block
//                                 ^^             punctuation.definition.comment.end.kdl, comment.block
//<-                                              comment.block.kdl
 //<-                                             comment.block.kdl
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^          comment.block.kdl
//                  ^^^^^^^^^^^^^^^^^             comment.block.kdl comment.block.kdl
*/     //
  5 6//^^                                         punctuation.definition.comment.begin.kdl, comment.line.double-slash.kdl
legal-multiple-line-continuations\//node␠+ node-prop-or-arg
\//node-space ≝   ws* escline ws* | ws+
\//escline    ≝ \ ws* single-line-comment|newline
\//←single line comment ending line continuation ↑
\
\//↑␤                  ending line continuation ↑
k=1;
//<- meta.node.kdl meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
n 1 "x" \
//^           meta.argument.value.kdl meta.mapping.value.kdl
//  ^^^       meta.argument.value.kdl meta.mapping.value.kdl meta.string.kdl string.quoted.double.kdl
//      ^     punctuation.separator.continuation.line.kdl
  a=2
//^           meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
// ^          meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl
//  ^         meta.property.value.kdl meta.mapping.value.kdl constant.numeric.value.kdl constant.numeric.integer.kdl
n 1 xxx \/*
//^           meta.argument.value.kdl meta.mapping.value.kdl
//  ^^^       meta.argument.value.kdl meta.mapping.value.kdl meta.string.kdl
//      ^     punctuation.separator.continuation.line.kdl
*/
  a=2
//^           meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
// ^          meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl
//  ^         meta.property.value.kdl meta.mapping.value.kdl constant.numeric.value.kdl constant.numeric.integer.kdl

n "Illegal due to no ␤ after line continuation before prop"\ /*
*/ k=1
// ^^^ invalid.illegal.position.kdl
k=1

// 9. Test Comments
/**/ // avoid being parsed as a doc '/**' comment
//<-   comment.block.kdl
//^^   comment.block.kdl
//^^   punctuation.definition.comment.end.kdl
//<-   punctuation.definition.comment.begin.kdl
 //<-  punctuation.definition.comment.begin.kdl

/*!Doc block comment /* nested block comment */*/
//                   ^^                              comment.block.documentation.kdl punctuation.definition.comment.begin.kdl
//                   ^^^^^^^^^^^^^^^^^^^^^^^^^^      comment.block.documentation.kdl comment.block.kdl
//                                           ^^      comment.block.documentation.kdl punctuation.definition.comment.end.kdl
//<-                                                 comment.block.documentation.kdl
 //<-                                                comment.block.documentation.kdl
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^    comment.block.documentation.kdl
//<-                                                 punctuation.definition.comment.begin.kdl
 //<-                                                punctuation.definition.comment.begin.kdl
//^                                                  punctuation.definition.comment.begin.kdl
//                                             ^^    punctuation.definition.comment.end.kdl

node-with-slashdash-number /--1.0 +2.0 \/*
//                         ^^                        punctuation.definition.comment.begin.kdl
//                           ^                     - punctuation.definition.comment.begin.kdl
//                         ^^^^^^                    comment.line.slash-dash
//                                ^                  keyword.operator.arithmetic.kdl
//                                ^^^^               constant.numeric.value.kdl, constant.numeric.decimal.kdl
*/
1 /-"comment string" /-#"r aw"# /-#"Raw est"s"#
//^^                                                 punctuation.definition.comment.begin.kdl
//  ^                                              - punctuation.definition.comment.begin.kdl
//^^^^^^^^^^^^^^^^^^                                 comment.line.slash-dash
//                  ^                              - comment.line.slash-dash
//                   ^^                              punctuation.definition.comment.begin.kdl
//                     ^                           - punctuation.definition.comment.begin.kdl
//                   ^^^^^^^^^                       comment.line.slash-dash
//                             ^                   - comment.line.slash-dash
//                              ^^                   punctuation.definition.comment.begin.kdl
//                                ^                - punctuation.definition.comment.begin.kdl
//                              ^^^^^^^^^^^^^^^     comment.line.slash-dash
//                                             ^  - comment.line.slash-dash
  /-nodeNestedSlashdashed "disabled" key=1 {
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.block.slash-dash.kdl
//^^                                         punctuation.definition.comment.begin.kdl
//^^^^^^^^^^^^^^^^^^^^^^^                    comment.line.slash-dash.kdl
//                                         ^ punctuation.section.mapping.begin.kdl
//<-                                         text.kdl2
 //<-                                        text.kdl2
  node_inner_disabled
//^^^^^^^^^^^^^^^^^^^                        comment.line.slash-dash.kdl
//^^^^^^^^^^^^^^^^^^^                        comment.block.slash-dash.kdl
  r 1 {
//    ^                                      punctuation.section.mapping.begin.kdl
    r 2 { r 3 { r 4 { r 5 { r 6;};};};};}
//                             ^             punctuation.section.mapping.end.kdl, punctuation.terminator.node
//                               ^           punctuation.section.mapping.end.kdl, punctuation.terminator.node
//                                 ^         punctuation.section.mapping.end.kdl, punctuation.terminator.node
//                                   ^       punctuation.section.mapping.end.kdl, punctuation.terminator.node
//                                     ^     punctuation.section.mapping.end.kdl, punctuation.terminator.node
  r 1 {
    r 2 { r 3 { r 4 { r 5 { r 6 } } } } }
//                              ^            punctuation.section.mapping.end.kdl
//                                ^          punctuation.section.mapping.end.kdl
//                                  ^        punctuation.section.mapping.end.kdl
//                                    ^      punctuation.section.mapping.end.kdl
//                                      ^    punctuation.section.mapping.end.kdl
}; node_post_slashdashed key=1
//<-                                    punctuation.section.mapping.end.kdl, punctuation.definition.comment.end, punctuation.terminator.node.kdl, comment.block.kdl
 //<-                                   punctuation.terminator.node
 //<-                                  -comment.block.kdl
// ^^^^^^^^^^^^^^^^^^^^^                entity.name.tag.node

n "/-Slashdashed nodes retain all the scopes of individual elements!"
/-nnn   kkk=111 kkk=222 "333" kkk=444 "555" kkk=666 {
//<-                                                  comment.block.slash-dash.kdl comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
 //<-                                                 comment.block.slash-dash.kdl comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.node.kdl
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.block.slash-dash.kdl
//^^^                                                 entity.name.tag.node.kdl comment.line.slash-dash.kdl
//      ^^^                                           meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//         ^                                          meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl comment.line.slash-dash.kdl
//          ^^^                                       meta.property.value.kdl meta.mapping.value.kdl constant.numeric.value.kdl constant.numeric.integer.kdl comment.line.slash-dash.kdl
//              ^^^                                   meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//                 ^                                  meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl comment.line.slash-dash.kdl
//                  ^^^                               meta.property.value.kdl meta.mapping.value.kdl constant.numeric.value.kdl constant.numeric.integer.kdl comment.line.slash-dash.kdl
//                      ^^^^^                         meta.argument.value.kdl meta.mapping.value.kdl meta.string.kdl string.quoted.double.kdl comment.line.slash-dash.kdl
//                      ^                             punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
//                          ^                         punctuation.definition.string.end.kdl comment.line.slash-dash.kdl
//                            ^^^                     meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//                               ^                    meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl comment.line.slash-dash.kdl
//                                ^^^                 meta.property.value.kdl meta.mapping.value.kdl constant.numeric.value.kdl constant.numeric.integer.kdl comment.line.slash-dash.kdl
//                                    ^^^^^           meta.argument.value.kdl meta.mapping.value.kdl meta.string.kdl string.quoted.double.kdl comment.line.slash-dash.kdl
//                                    ^               punctuation.definition.string.begin.kdl comment.line.slash-dash.kdl
//                                        ^           punctuation.definition.string.end.kdl comment.line.slash-dash.kdl
//                                          ^^^       meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl comment.line.slash-dash.kdl
//                                             ^      meta.property.separator.kdl meta.mapping.separator.kdl punctuation.separator.key-value.kdl comment.line.slash-dash.kdl
//                                              ^^^   meta.property.value.kdl meta.mapping.value.kdl constant.numeric.value.kdl constant.numeric.integer.kdl comment.line.slash-dash.kdl
//                                                  ^ meta.block.child.kdl punctuation.section.mapping.begin.kdl comment.line.slash-dash.kdl
  nnn   kkk=111 kkk=222 "333" kkk=444 "555" kkk=666 {
  nnn   kkk=111 kkk=222 "333" kkk=444 "555" kkk=666
  }
}

// 2 Node Element: 5 End
n /-
//^^                         comment.line.slash-dash.kdl punctuation.definition.comment.begin.kdl
//  ^                       -invalid.illegal.position.kdl
n "↑ don't erorr newlines";
//<-                         meta.node.kdl

// Test −I -Invalid -Illegal

// 3 Data: Keywords (−Invalid)
n     #tru //← partial keyword is not invalid
//     ^^^        -invalid.illegal.position.kdl
n   (a)#tru
//      ^^^        -invalid.illegal.position.kdl
n/*  */#tru
//      ^^^        -invalid.illegal.position.kdl
n/**/k=#tru
//      ^^^        -invalid.illegal.position.kdl
n \
#tru;
//<-              -invalid.illegal.position.kdl
 //<-             -invalid.illegal.position.kdl
// ^              -invalid.illegal.position.kdl
n |#tru // v2 valid arg with |, but only when it's in a valid argument position
// ^               invalid.illegal.kdl
n |#fal //
n a=x ;
//  ^             -invalid.illegal.position.kdl
//   ^            -invalid.illegal.position.kdl
//    ^            punctuation.terminator.node.kdl
n a=x;
//  ^             -invalid.illegal.position.kdl
//   ^            -invalid.illegal.position.kdl
//   ^             punctuation.terminator.node.kdl
n/**/k=|#tru //
//     ^^^^^       meta.property.value.kdl meta.mapping.value.kdl meta.string.kdl string.unquoted.kdl
//      ^          invalid.illegal.kdl

//Don't error incomplete invalid arguments that may turn into valid properties...
n r
//^                                     meta.argument.value.kdl meta.mapping.value.kdl
//^                                    -invalid.illegal.position.kdl
//... (v1, not bare id args are allowed)but do error when we expect the node is complete with an explicit terminator
n r;
//^                                     meta.argument.value.kdl meta.mapping.value.kdl
//^                                    -invalid.illegal.position.kdl
// ^                                    punctuation.terminator.node.kdl
//...
n r//
//^                                     meta.argument.value.kdl meta.mapping.value.kdl
//^                                    -invalid.illegal.position.kdl
// ^                                    comment.line.double-slash.kdl


  nn "a";  // cmd cmd aa d
  nn "a" ; // cmd cmd aa d
  nn "a"   // cmd cmd aa d
/-nn "a"   // cmd cmd aa d
  nn "a"   // cmd cmd aa d
/-nn "a";  // cmd cmd aa d
/-nn "a" ; // cmd cmd aa d
//                ^        -invalid.illegal
nnn (aaaa)error_stops→;
//  ^^^^^^^^^^^^^^^^^^   meta.argument.value.kdl meta.mapping.value.kdl
//  ^^^^^^               meta.annotation.kdl
//  ^                    punctuation.separator.annotation.begin.kdl
//   ^^^^                entity.name.type.kdl
//       ^               punctuation.separator.annotation.end.kdl
//        ^^^^^^^^^^^    invalid.illegal.muted.position.kdl
//                   ^   invalid.illegal.position.kdl
//                    ^ -invalid.illegal
//                    ^  punctuation.terminator.node.kdl

// 4. Test Children −I -Invalid -Illegal
n k=+1{k;};
//    ^                                       -invalid.illegal.position.kdl



// 8. Test Line continuation
// Various whitespace separating line continuation and arguments
n \
k=1
//<- meta.node.kdl meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
n \ 
k=1
//<- meta.node.kdl meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
n \/*
*/
k=1
//<- meta.node.kdl meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl
n \ /*
*/
k=1
//<- meta.node.kdl meta.property.name.kdl meta.mapping.key.kdl entity.other.attribute-name.kdl

/-n { r 1 ;// line comment not consuming ␤
}
//<-                                          -invalid.illegal.position.kdl
n { r 1 ;
}
//<-                                          -invalid.illegal.position.kdl
n k=+1{"←children don't require space!";};
//    ^                                       -invalid.illegal.position.kdl
n          #true   #true   #true   #true ;
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n   "a"    #true   #true   #true   #true    " comment";
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n        /-#true /-#true /-#true /-#true ;
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n /-"a"  /-#true /-#true /-#true /-#true /- " comment";
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n /-"  comment string"
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n /-  "comment string"
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n /-/**/"comment string"
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n /-/**/ "comment string"
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n   1   #true   "comment string"    #"r aww"# /-#"Raw est"s"#
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n   1   #true   "comment string"  /-#"r aww"# /-#"Raw est"s"#
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal
n /-1 /-#true /- "comment string" /-#"r aw"# /-#"Raw est"s"#
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ -invalid.illegal


// Test /-Slashdashed Elements
// 4. Test Numbers
/-de-with-number +2.0
//               ^^^^                             constant.numeric.value.kdl, constant.numeric.decimal.kdl comment.line.slash-dash.kdl
//               ^                                keyword.operator.arithmetic.kdl comment.line.slash-dash.kdl
/--num    +1.234e-42 // decimal-radix numbers
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     comment.block.slash-dash.kdl
//                   ^^^^^^^^^^^^^^^^^^^^^^^^     comment.line.slash-dash.kdl
//        ^^^^^^^^^^                              constant.numeric.value.kdl, constant.numeric.float.kdl
//        ^^^^^^                                  constant.numeric.significand.kdl
//              ^^^^                             -constant.numeric.significand.kdl
//              ^^^^                              constant.numeric.exponent.kdl
//        ^^^^^^                                 -constant.numeric.exponent.kdl
//        ^                                       keyword.operator.arithmetic.kdl
//               ^                                keyword.operator.arithmetic.kdl
//          ^                                     punctuation.separator.decimal.kdl
//              ^                                 punctuation.separator.exponent.kdl
/--num    -1.234    //   with optional exponent
//        ^^^^^^                                  constant.numeric.value.kdl, constant.numeric.decimal.kdl
//        ^                                       keyword.operator.arithmetic.kdl
//          ^                                     punctuation.separator.decimal.kdl
/--num    -3        //   with optional fractional
//        ^^                                      constant.numeric.integer.kdl, constant.numeric.value.kdl
//        ^                                       keyword.operator.arithmetic.kdl
/--hex    0xdeadbeef
//        ^^^^^^^^^^                    constant.numeric.integer.hexadecimal.kdl
//        ^^                            constant.numeric.base.kdl
//          ^^^^^^^^                    constant.numeric.value.kdl
/--octal  0o755
//        ^^^^^                         constant.numeric.integer.octal.kdl
//        ^^                            constant.numeric.base.kdl
//          ^^^                         constant.numeric.value.kdl
/--binary 0b10101101
//        ^^^^^^^^^^                    constant.numeric.integer.binary.kdl
//        ^^                            constant.numeric.base.kdl
//          ^^^^^^^^                    constant.numeric.value.kdl
/-gnum 1_000_000.000_001e+1_000 // Numbers can have underscores to help readability
//      ^                               punctuation.separator.number.kdl
//          ^                           punctuation.separator.number.kdl
//                  ^                   punctuation.separator.number.kdl
//                         ^            punctuation.separator.number.kdl


// Test Invalid
  ("t1""t2")n "Only a single value in a type allowed"
//^^^^^^^^^^ meta.node.kdl meta.annotation.kdl
// ^^^^^^^^  entity.name.type.kdl
//     ^     invalid.illegal.position.kdl
//      ^^^  invalid.illegal.muted.position.kdl
/-("t1""t2")n "Only a single value in a type allowed"
//^^^^^^^^^^ meta.node.kdl meta.annotation.kdl
// ^^^^^^^^  entity.name.type.kdl
//     ^     invalid.illegal.position.kdl
//      ^^^  invalid.illegal.muted.position.kdl


// 7. Test various

/-\
  node;
//^^^^ comment.block.slash-dash.kdl meta.node.kdl entity.name.tag.node.kdl comment.line.slash-dash.kdl
n {
/-\
  node;
//^^^^ meta.node.kdl meta.block.child.kdl comment.block.slash-dash.kdl meta.node.kdl entity.name.tag.node.kdl comment.line.slash-dash.kdl
};

/-  \
node;
// ↑ should be commented with slashdash since node sp is allowed ws* escline ws* | ws+

